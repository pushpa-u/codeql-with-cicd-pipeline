name: Analyse and Build  the image

on:
  push:
    branches:
      - master


env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_REPO_UI: "codeql"
jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: javascript-typescript
          build-mode: none

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

    - name: Check for critical CodeQL alerts
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        CRITICAL_ISSUES=$(gh api repos/pushpa-u/codeql-with-cicd-pipeline/code-scanning/alerts \
  --jq '.[] | select(.state=="open" and 
          (.rule.security_severity_level=="critical" or 
           .rule.security_severity_level=="high" or 
           .rule.security_severity_level=="medium"))' | wc -l)
  
        if [[ "$CRITICAL_ISSUES" -gt 0 ]]; then
          echo "CRITICAL security vulnerabilities found: $CRITICAL_ISSUES"
          exit 1 
        else
          echo "âœ… No critical security vulnerabilities found."
        fi


  Build-Deploy:
    needs: analyze
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker CLI
        uses: docker/setup-buildx-action@v1 # Set the Docker CLI version
        
  
      - name: Login the docker, Build and Push the Image
        run: |
          cd "$DOCKERFILEPATH"
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_ACCESS_TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'$DOCKER_USERNAME'", "password": "'$DOCKER_PASSWORD'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          input_string=$(curl -s -H "Authorization: Bearer $DOCKER_ACCESS_TOKEN" https://registry.hub.docker.com/v2/repositories/pushpau/$DOCKER_REPO_UI/tags | jq -r '.results | max_by(.last_updated) | .name')
          number=$(echo "$input_string" | grep -oE '[0-9]+$') && new_number=$((number + 1)) && new_string=$(echo "$input_string" | sed "s/$number$/$new_number/")
          docker build -t pushpau/$DOCKER_REPO_UI:$new_string .
          docker push pushpau/$DOCKER_REPO_UI:$new_string


